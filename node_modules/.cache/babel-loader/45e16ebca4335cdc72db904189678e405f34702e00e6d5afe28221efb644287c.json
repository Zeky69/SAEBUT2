{"ast":null,"code":"import Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\nimport ShopService from '../services/shop.service';\nimport BankService from '../services/bankaccount.service';\nexport default new Vuex.Store({\n  // state = les données centralisées\n  state: () => ({\n    accountAmount: 0,\n    viruses: [],\n    shopUser: null\n  }),\n  // mutations = fonctions synchrones pour mettre à jour le state (!!! interdit de modifier directement le state)\n  mutations: {\n    updateViruses(state, viruses) {\n      state.viruses = viruses;\n    },\n    updateShopUser(state, user) {\n      state.shopUser = user;\n    },\n    updateAccountAmount(state, amount) {\n      state.accountAmount = amount;\n    }\n  },\n  // actions = fonctions asynchrone pour mettre à jour le state, en faisant appel aux mutations, via la fonction commit()\n  actions: {\n    async shopLogin({\n      commit\n    }, data) {\n      console.log('login');\n      let response = await ShopService.shopLogin(data);\n      if (response.error === 0) {\n        commit('updateShopUser', response.data);\n      } else {\n        console.log(response.data);\n      }\n    },\n    async getAllViruses({\n      commit\n    }) {\n      console.log('récupération des viruses');\n      let response = await ShopService.getAllViruses();\n      if (response.error === 0) {\n        commit('updateViruses', response.data);\n      } else {\n        console.log(response.data);\n      }\n    },\n    async getAccountAmount({\n      commit\n    }, number) {\n      console.log('récupération du montant du compte');\n      let response = await BankService.getAccountAmount(number);\n      if (response.error === 0) {\n        commit('updateAccountAmount', response.data);\n        console.log(response.data);\n      } else {\n        console.log(response.data);\n      }\n    }\n  }\n});","map":{"version":3,"names":["Vue","Vuex","use","ShopService","BankService","Store","state","accountAmount","viruses","shopUser","mutations","updateViruses","updateShopUser","user","updateAccountAmount","amount","actions","shopLogin","commit","data","console","log","response","error","getAllViruses","getAccountAmount","number"],"sources":["/home/kalinux/Calixte/BUT2/devWeb/frontend/TP/drmad/src/store/index.js"],"sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nimport ShopService from '../services/shop.service'\nimport BankService from '../services/bankaccount.service'\n\nexport default new Vuex.Store({\n  // state = les données centralisées\n  state: () => ({\n    accountAmount: 0,\n    viruses: [],\n    shopUser: null,\n  }),\n  // mutations = fonctions synchrones pour mettre à jour le state (!!! interdit de modifier directement le state)\n  mutations: {\n    updateViruses(state, viruses) {\n      state.viruses = viruses\n    },\n    updateShopUser(state, user) {\n      state.shopUser = user\n    },\n    updateAccountAmount(state, amount) {\n      state.accountAmount = amount\n    }\n  },\n  // actions = fonctions asynchrone pour mettre à jour le state, en faisant appel aux mutations, via la fonction commit()\n  actions: {\n    async shopLogin({commit}, data) {\n      console.log('login');\n      let response = await ShopService.shopLogin(data)\n      if (response.error === 0) {\n        commit('updateShopUser', response.data)\n      }\n      else {\n        console.log(response.data)\n      }\n    },\n    async getAllViruses({commit}) {\n      console.log('récupération des viruses');\n      let response = await ShopService.getAllViruses()\n      if (response.error === 0) {\n        commit('updateViruses', response.data)\n      }\n      else {\n        console.log(response.data)\n      }\n    },\n    async getAccountAmount({commit}, number) {\n      console.log('récupération du montant du compte');\n      let response = await BankService.getAccountAmount(number)\n      if (response.error === 0) {\n        commit('updateAccountAmount', response.data)\n        console.log(response.data)\n      }\n      else {\n        console.log(response.data)\n      }\n    }\n  }\n})\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,IAAI,MAAM,MAAM;AAEvBD,GAAG,CAACE,GAAG,CAACD,IAAI,CAAC;AAEb,OAAOE,WAAW,MAAM,0BAA0B;AAClD,OAAOC,WAAW,MAAM,iCAAiC;AAEzD,eAAe,IAAIH,IAAI,CAACI,KAAK,CAAC;EAC5B;EACAC,KAAK,EAAEA,CAAA,MAAO;IACZC,aAAa,EAAE,CAAC;IAChBC,OAAO,EAAE,EAAE;IACXC,QAAQ,EAAE;EACZ,CAAC,CAAC;EACF;EACAC,SAAS,EAAE;IACTC,aAAaA,CAACL,KAAK,EAAEE,OAAO,EAAE;MAC5BF,KAAK,CAACE,OAAO,GAAGA,OAAO;IACzB,CAAC;IACDI,cAAcA,CAACN,KAAK,EAAEO,IAAI,EAAE;MAC1BP,KAAK,CAACG,QAAQ,GAAGI,IAAI;IACvB,CAAC;IACDC,mBAAmBA,CAACR,KAAK,EAAES,MAAM,EAAE;MACjCT,KAAK,CAACC,aAAa,GAAGQ,MAAM;IAC9B;EACF,CAAC;EACD;EACAC,OAAO,EAAE;IACP,MAAMC,SAASA,CAAC;MAACC;IAAM,CAAC,EAAEC,IAAI,EAAE;MAC9BC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;MACpB,IAAIC,QAAQ,GAAG,MAAMnB,WAAW,CAACc,SAAS,CAACE,IAAI,CAAC;MAChD,IAAIG,QAAQ,CAACC,KAAK,KAAK,CAAC,EAAE;QACxBL,MAAM,CAAC,gBAAgB,EAAEI,QAAQ,CAACH,IAAI,CAAC;MACzC,CAAC,MACI;QACHC,OAAO,CAACC,GAAG,CAACC,QAAQ,CAACH,IAAI,CAAC;MAC5B;IACF,CAAC;IACD,MAAMK,aAAaA,CAAC;MAACN;IAAM,CAAC,EAAE;MAC5BE,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvC,IAAIC,QAAQ,GAAG,MAAMnB,WAAW,CAACqB,aAAa,CAAC,CAAC;MAChD,IAAIF,QAAQ,CAACC,KAAK,KAAK,CAAC,EAAE;QACxBL,MAAM,CAAC,eAAe,EAAEI,QAAQ,CAACH,IAAI,CAAC;MACxC,CAAC,MACI;QACHC,OAAO,CAACC,GAAG,CAACC,QAAQ,CAACH,IAAI,CAAC;MAC5B;IACF,CAAC;IACD,MAAMM,gBAAgBA,CAAC;MAACP;IAAM,CAAC,EAAEQ,MAAM,EAAE;MACvCN,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;MAChD,IAAIC,QAAQ,GAAG,MAAMlB,WAAW,CAACqB,gBAAgB,CAACC,MAAM,CAAC;MACzD,IAAIJ,QAAQ,CAACC,KAAK,KAAK,CAAC,EAAE;QACxBL,MAAM,CAAC,qBAAqB,EAAEI,QAAQ,CAACH,IAAI,CAAC;QAC5CC,OAAO,CAACC,GAAG,CAACC,QAAQ,CAACH,IAAI,CAAC;MAC5B,CAAC,MACI;QACHC,OAAO,CAACC,GAAG,CAACC,QAAQ,CAACH,IAAI,CAAC;MAC5B;IACF;EACF;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}